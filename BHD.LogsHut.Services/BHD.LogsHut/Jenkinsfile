pipeline {
    agent any
    
    options {
        copyArtifactPermission('*')
    }

    environment {
        GIT_CREDENTIALS_ID = 'github'
        RELEASE_DIR = 'release'
        VERSION_FILE = 'version.txt'
        APP_NAME = 'BHD.LogsHut'
        newVersion = ''
    }
    
    stages {
        stage('Read New Version') {
            steps {
                dir('BHD.Services/BHD.LogsHut') {
                    script {
                        def currentVersion = readFile(file: VERSION_FILE).trim()
                        echo "Current Project Version: ${currentVersion}"   

                        newVersion = incrementVersion(currentVersion)                    

                        writeFile(file: VERSION_FILE, text: newVersion)                    
                        echo "Building Project Version: ###${newVersion}###"

                        currentBuild.description = "Version: ${newVersion}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('BHD.Services/BHD.LogsHut') {
                    script {
                        sh 'dotnet restore'
                        sh 'dotnet build -c Release'  // Specify the Release configuration
                    }
                }
            }
        }

        stage('Package') {
            steps {
                dir('BHD.Services/BHD.LogsHut') {
                    script {
                        sh "mkdir -p ${env.RELEASE_DIR}"

                        sh "dotnet publish -c Release -o ${env.RELEASE_DIR}"

                        sh "cp Dockerfile release/"
                    }
                }
            }
        }

        stage('Save Artifacts') {
            steps{
                dir('BHD.Services/BHD.LogsHut'){
                    archiveArtifacts artifacts: "${env.RELEASE_DIR}/*", allowEmptyArchive: true
                }  
            }
        }

        stage('Commit Version') {
            steps{
                dir('BHD.Services/BHD.LogsHut'){
                    script{
                        withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USR', passwordVariable: 'GIT_PASS')]) {
                            sh "git add ${VERSION_FILE}"
                            sh "git commit -m 'Increment ${APP_NAME} version to ${newVersion}'"
                            sh "git tag -a ${APP_NAME}-${newVersion} -m 'Version ${newVersion} for ${APP_NAME}'"
                            sh "git push https://${GIT_USR}:${GIT_PASS}@github.com/alboghardau/BHD.Generic.git HEAD:master --no-verify"
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Build and packaging successful! ${APP_NAME} Version: ${newVersion}"          
        }
        failure {
            echo 'Build failed!'
        }
    }
}

def incrementVersion(version) {
    // Implement your version increment logic
    def segments = version.split('\\.')
    segments[2] = (segments[2].toInteger() + 1).toString()
    return segments.join('.')
}